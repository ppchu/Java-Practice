java.math.*
	pow(a, b) // a to the power of b

8 primitive types
char
boolean
byte(8-bit)
short(16-bit)
int(32-bit)
long(64-bit)
float
double

Max and Min values for (Byte, Short, Integer, Long, Float, Double):
<Type>.MIN_VALUE
<Type>.MAX_VALUE

Scanner
hasNext() and related methods

Static Initialization Blocks
static {
    // whatever code is needed for initialization goes here
}
A class can have any number of static initialization blocks, and they can appear anywhere in the class body. The runtime system guarantees that static initialization blocks are called in the order that they appear in the source code.

There is an alternative to static blocks â€” you can write a private static method:

class Whatever {
    public static varType myVar = initializeClassVariable();
        
    private static varType initializeClassVariable() {

        // initialization code goes here
    }
}
The advantage of private static methods is that they can be reused later if you need to reinitialize the class variable.

Integer to String
Integer.toString(i) or String.valueOf(i)
String.valueOf() is slightly safer. If arg is null then string "null" is returned
Object.toString throws NullPointerException if instance is null, arguably less safe

String to Int(eger)
Integer.parseInt() returns primitive int
Integer.valueOf() returns Integer object

Calendar
GregorianCalendar(int year, int month(starts at 0), int dayOfMonth)

System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length) 
- is like C memmove